# import streamlit as st
# import time
# import requests

# st.title('Summarize tool')

# if 'messages' not in st.session_state:
#     st.session_state.messages = []

# for message in st.session_state.messages:
#     with st.chat_message(message['role']):
#         st.markdown(message['content'])

# if prompt := st.chat_input("Input text here ?"):
#     with st.chat_message('user'):
#         st.markdown(prompt)
#     st.session_state.messages.append({'role': 'user', 'content': prompt})

#     # Thêm phần loading trước khi trả lời
#     with st.chat_message('assistant'):
#         message_placeholder = st.empty()
#         message_placeholder.markdown("Loading...")
#         time.sleep(2)  # Thời gian chờ 2 giây

#         # Gửi yêu cầu đến API
#         try:
#             api_url = "http://192.168.50.47:5555/model/"  # Thay thế bằng URL của API thực tế
#             headers = {"Content-Type": "application/json"}
#             data = {'text': prompt, 'type': 'Tóm tắt ngắn gọn'}
#             response = requests.post(api_url, json=data, headers=headers)
#             # Xử lý kết quả trả về từ API
#             if response.status_code == 200:
#                 response = response.json()
#                 result = response['data']
#                 result.replace('<end_of_turn>', '')
#             else:
#                 result = "Error: Unable to summarize the text."
#         except Exception as e:
#             result = f"Error: {str(e)}"

#         # Cập nhật nội dung trả lời của assistant
#         message_placeholder.markdown(result)

#     st.session_state.messages.append({'role': 'assistant', 'content': result})

import streamlit as st
import time
import requests

st.title('Summarize tool')

if 'messages' not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message['role']):
        st.markdown(message['content'])

# Thêm lựa chọn cho loại tóm tắt
summary_type = st.selectbox(
    "Chọn loại tóm tắt:",
    ("Tóm tắt ngắn gọn", "Tóm tắt chi tiết")
)

if prompt := st.chat_input("Input text here ?"):
    with st.chat_message('user'):
        st.markdown(prompt)

    # Thêm phần loading trước khi trả lời
    with st.chat_message('assistant'):
        message_placeholder = st.empty()
        message_placeholder.markdown("Loading...")
        time.sleep(2)  # Thời gian chờ 2 giây

        # Gửi yêu cầu đến API
        try:
            api_url = "http://192.168.50.47:5555/model/"  # Thay thế bằng URL của API thực tế
            headers = {"Content-Type": "application/json"}
            data = {'text': prompt, 'type': summary_type}
            response = requests.post(api_url, json=data, headers=headers)
            
            # Xử lý kết quả trả về từ API
            if response.status_code == 200:
                response = response.json()
                result = response['data']
                result = result.replace('<end_of_turn>', '')
            else:
                result = "Error: Unable to summarize the text."
        except Exception as e:
            result = f"Error: {str(e)}"

        # Cập nhật nội dung trả lời của assistant
        message_placeholder.markdown(result)

    st.session_state.messages.append({'role': 'assistant', 'content': result})


    import streamlit as st
import time
import requests

st.title('Summarize Tool')

# Initialize session state for storing assistant messages only
if 'assistant_messages' not in st.session_state:
    st.session_state.assistant_messages = []

# Split the page into two columns
col1, col2 = st.columns(2)

# Left column: User input and summary type selection
with col1:
    st.subheader("Input")

    # Add input for summary type selection
    summary_type = st.selectbox(
        "Chọn loại tóm tắt:",
        ("Tóm tắt ngắn gọn", "Tóm tắt chi tiết")
    )

    # Input text
    prompt = st.text_area("Input text here", height=300)

    # Button to submit the text
    submit = st.button("Submit")

# Right column: Display assistant responses only
with col2:
    st.subheader("Result")

    for message in st.session_state.assistant_messages:
        st.markdown(message)

    if submit and prompt:
        # Display loading state
        with st.spinner("Loading..."):
            time.sleep(2)  # Simulate a delay

            # Send request to API
            try:
                api_url = "http://192.168.50.47:5555/model/"  # Replace with actual API URL
                headers = {"Content-Type": "application/json"}
                data = {'text': prompt, 'type': summary_type}
                response = requests.post(api_url, json=data, headers=headers)

                # Handle API response
                if response.status_code == 200:
                    response_data = response.json()
                    result = response_data.get('data', '')
                    result = result.replace('<end_of_turn>', '')
                else:
                    result = "Error: Unable to summarize the text."
            except Exception as e:
                result = f"Error: {str(e)}"

            # Display and store the result in session state
            st.markdown(result)
            st.session_state.assistant_messages.append(result)


import streamlit as st
import time
import requests

# Set the app to wide mode
st.set_page_config(layout="wide")

st.title('Công cụ tóm tắt văn bản')

# Initialize session state for storing assistant messages only
if 'assistant_messages' not in st.session_state:
    st.session_state.assistant_messages = []

# Split the page into two columns
col1, col2 = st.columns(2)

# Left column: User input and summary type selection
with col1:
    # Input text area
    prompt = st.text_area("Nhập văn bản cần tóm tắt", height=400)

    # Add input for summary type selection below the text area
    summary_type = st.selectbox(
        "Chọn loại tóm tắt:",
        ("Tóm tắt ngắn gọn", "Tóm tắt chi tiết")
    )

    # Button to submit the text
    submit = st.button("Tóm tắt")

# Right column: Display assistant responses only
with col2:
    for message in st.session_state.assistant_messages:
        st.markdown(
            f'<div style="max-height:500px; overflow-y:auto;">{message}</div>',
            unsafe_allow_html=True
        )

    if submit and prompt:
        # Display loading state
        with st.spinner("Đang xử lý..."):
            # time.sleep(2)  # Simulate a delay

            # Send request to API
            try:
                api_url = "http://192.168.50.47:5555/model/"  # Replace with actual API URL
                headers = {"Content-Type": "application/json"}
                data = {'text': prompt, 'type': summary_type}
                response = requests.post(api_url, json=data, headers=headers)

                # Handle API response
                if response.status_code == 200:
                    response_data = response.json()
                    result = response_data['data']
                else:
                    result = "Error: Unable to summarize the text."
            except Exception as e:
                result = f"Error: {str(e)}"

            # Display and store the result in session state
            st.markdown(
                f'<div style="max-height:400px; overflow-y:auto;">{result}</div>',
                unsafe_allow_html=True
            )
            st.session_state.assistant_messages.append(result)



import streamlit as st
import time
import requests

# Set the app to wide mode
st.set_page_config(layout="wide")

st.title('Công cụ tóm tắt văn bản')

# Initialize session state for storing assistant messages only
if 'assistant_messages' not in st.session_state:
    st.session_state.assistant_messages = []

# Split the page into two columns
col1, col2 = st.columns(2)

# Left column: User input and summary type selection
with col1:
    # Initialize prompt variable
    prompt = ""

    # Add file uploader for text files
    uploaded_file = st.file_uploader("Tải lên một tệp văn bản (.txt)", type=["txt"])

    # If a file is uploaded, read its content and set it as the prompt
    if uploaded_file is not None:
        prompt = uploaded_file.read().decode("utf-8")

    # Input text area
    prompt = st.text_area("Nhập văn bản cần tóm tắt", value=prompt, height=300)

    # Add input for summary type selection below the text area
    summary_type = st.selectbox(
        "Chọn loại tóm tắt:",
        ("Tóm tắt ngắn gọn", "Tóm tắt chi tiết")
    )

    # Button to submit the text
    submit = st.button("Tóm tắt")

# Right column: Display assistant responses only
with col2:
    for message in st.session_state.assistant_messages:
        st.markdown(
            f'<div style="max-height:500px; overflow-y:auto; margin-top:20px;">{message}</div>',
            unsafe_allow_html=True
        )

    if submit and prompt:
        # Display loading state
        with st.spinner("Đang xử lý..."):
            # time.sleep(2)  # Simulate a delay

            # Send request to API
            try:
                api_url = "http://192.168.50.47:5555/model/"  # Replace with actual API URL
                headers = {"Content-Type": "application/json"}
                data = {'text': prompt, 'type': summary_type}
                response = requests.post(api_url, json=data, headers=headers)

                # Handle API response
                if response.status_code == 200:
                    response_data = response.json()
                    result = response_data.get('data', '')
                    result = result.replace('<end_of_turn>', '')
                else:
                    result = "Error: Unable to summarize the text."
            except Exception as e:
                result = f"Error: {str(e)}"

            # Display and store the result in session state
            st.markdown(
                f'<div style="max-height:400px; overflow-y:auto; margin-top:20px;">{result}</div>',
                unsafe_allow_html=True
            )
            st.session_state.assistant_messages.append(result)



# import streamlit as st
# import requests

# # Set the app to wide mode
# st.set_page_config(layout="wide")

# st.title('Công cụ tóm tắt văn bản')

# # Initialize session state for storing assistant messages only
# if 'assistant_messages' not in st.session_state:
#     st.session_state.assistant_messages = []

# # Split the page into two columns
# col1, col2 = st.columns(2)

# # Left column: User input and summary type selection
# with col1:
#     # Initialize prompt variable
#     prompt = ""

#     # Add file uploader for text files
#     uploaded_file = st.file_uploader("Tải lên một tệp văn bản (.txt)", type=["txt"])

#     # If a file is uploaded, read its content and set it as the prompt
#     if uploaded_file is not None:
#         prompt = uploaded_file.read().decode("utf-8")

#     # Input text area
#     prompt = st.text_area("Nhập văn bản cần tóm tắt", value=prompt, height=300)

#     # Add input for summary type selection below the text area
#     summary_type = st.selectbox(
#         "Chọn loại tóm tắt:",
#         ("Tóm tắt ngắn gọn", "Tóm tắt chi tiết")
#     )

#     # Button to submit the text
#     submit = st.button("Tóm tắt")

# # Right column: Display assistant responses only
# with col2:
#     for message in st.session_state.assistant_messages:
#         st.markdown(
#             f'<div style="max-height:500px; overflow-y:auto; margin-top:20px;">{message}</div>',
#             unsafe_allow_html=True
#         )

#     if submit and prompt:
#         # Display loading state
#         with st.spinner("Đang xử lý..."):
#             # time.sleep(2)  # Simulate a delay

#             # Send request to API
#             try:
#                 api_url = "http://192.168.50.47:5555/model/"  # Replace with actual API URL
#                 headers = {"Content-Type": "application/json"}
#                 data = {'text': prompt, 'type': summary_type}
#                 response = requests.post(api_url, json=data, headers=headers)

#                 # Handle API response
#                 if response.status_code == 200:
#                     response_data = response.json()
#                     result = response_data.get('data', '')
#                     result = result.replace('<end_of_turn>', '')
#                 else:
#                     result = "Error: Unable to summarize the text."
#             except Exception as e:
#                 result = f"Error: {str(e)}"

#             # Display and store the result in session state
#             st.markdown(
#                 f'<div style="max-height:400px; overflow-y:auto; margin-top:20px;">{result}</div>',
#                 unsafe_allow_html=True
#             )
#             st.session_state.assistant_messages.append(result)


# latest
# import streamlit as st
# import requests

# # Set the app to wide mode
# st.set_page_config(layout="wide")

# st.title("Công cụ tóm tắt văn bản")

# # Initialize session state for storing assistant messages and result text
# if "assistant_messages" not in st.session_state:
#     st.session_state.assistant_messages = []
# if "result_text" not in st.session_state:
#     st.session_state.result_text = ""

# # Split the page into two columns
# col1, col2 = st.columns(2)

# # Left column: User input and summary type selection
# with col1:
#     # Initialize prompt variable
#     prompt = ""

#     # Add file uploader for text files
#     uploaded_file = st.file_uploader("Tải lên một tệp văn bản (.txt)", type=["txt"])

#     # If a file is uploaded, read its content and set it as the prompt
#     if uploaded_file is not None:
#         prompt = uploaded_file.read().decode("utf-8")

#     # Input text area
#     prompt = st.text_area(
#         "Nhập văn bản cần tóm tắt, tối đa 5000 từ", value=prompt, height=300, max_chars=5000, key="input_text_area"
#     )

#     # Add input for summary type selection below the text area
#     summary_type = st.selectbox(
#         "Chọn loại tóm tắt:", ("Tóm tắt ngắn gọn", "Tóm tắt chi tiết")
#     )

#     # Button to submit the text
#     submit = st.button("Tóm tắt")

# # Right column: Display instructions and results
# with col2:
#     # Always show instructions
#     st.markdown(
#         """
#         <div style="text-align:left; margin-top:20px;">
#             <h3>Hướng dẫn sử dụng:</h3>
#             <p>1. Nhập dữ liệu hoặc dán dữ liệu vào ô bên trái.</p>
#             <p>2. Chọn tùy chọn: tóm tắt ngắn gọn hay tóm tắt chi tiết.</p>
#             <p>3. Bấm nút Tóm Tắt và tận hưởng kết quả.</p>
#         </div>
#         """,
#         unsafe_allow_html=True,
#     )
#     st.markdown(
#         """
#         <hr style="border: 1px solid #ddd; margin-top: 10px; margin-bottom: 10px;">
#         """,
#         unsafe_allow_html=True,
#     )

#     # Display loading state
#     result = ""
#     if submit and prompt:
#         with st.spinner("Đang xử lý..."):
#             try:
#                 # Send request to API
#                 api_url = "http://192.168.50.47:5005/predict"  # Replace with actual API URL
#                 headers = {"Content-Type": "application/json"}
#                 data = {"text": prompt, "type": summary_type}
#                 response = requests.post(api_url, json=data, headers=headers)

#                 # Handle API response
#                 if response.status_code == 200:
#                     response_data = response.json()
#                     result = response_data['data']
#                 else:
#                     result = "Error: Unable to summarize the text."
#             except Exception as e:
#                 result = f"Error: {str(e)}"

#             # Store the result in session state
#             st.session_state.result_text = result

#     # Display result if available
#     if st.session_state.result_text:
#         st.markdown(
#             st.session_state.result_text,
#             unsafe_allow_html=True,
#         )